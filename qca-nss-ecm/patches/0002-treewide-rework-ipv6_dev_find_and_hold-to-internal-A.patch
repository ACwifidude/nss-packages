From c4036311d65872756cd50ad8125668c422a164d0 Mon Sep 17 00:00:00 2001
From: Ansuel Smith <ansuelsmth@gmail.com>
Date: Sat, 15 May 2021 03:51:14 +0200
Subject: [PATCH 02/12] treewide: rework ipv6_dev_find_and_hold to internal API

ipv6_dev_find_and_hold is a downstream API not present in upstream
kernel. Rework the function and reimplement it to an internal function
of the kernel as it doesn't require special export.

Signed-off-by: Ansuel Smith <ansuelsmth@gmail.com>
---
 ecm_interface.c                  | 32 ++++++++++++++++++++++++++++++--
 ecm_interface.h                  |  1 +
 frontends/ecm_front_end_common.c |  7 +++++--
 3 files changed, 36 insertions(+), 4 deletions(-)

--- a/ecm_interface.c
+++ b/ecm_interface.c
@@ -336,7 +336,7 @@ static struct net_device *ecm_interface_
 	struct net_device *dev;
 
 	ECM_IP_ADDR_TO_NIN6_ADDR(addr6, addr);
-	dev = (struct net_device *)ipv6_dev_find(&init_net, &addr6, 1);
+	dev = (struct net_device *)ecm_interface_ipv6_dev_find_and_hold(&init_net, &addr6, 1);
 	return dev;
 }
 #endif
@@ -719,6 +719,34 @@ bool ecm_interface_mac_addr_get(ip_addr_
 EXPORT_SYMBOL(ecm_interface_mac_addr_get);
 
 #ifdef ECM_IPV6_ENABLE
+/* ecm_interface_ipv6_dev_find_and_hold()
+ *	Find (and hold) net device that has the given address.
+ *	Or NULL on failure.
+ */
+struct net_device *ecm_interface_ipv6_dev_find_and_hold(struct net *net, struct in6_addr *addr,
+							int strict)
+{
+	struct inet6_ifaddr *ifp;
+	struct net_device *dev;
+
+	ifp = ipv6_get_ifaddr(net, addr, NULL, strict);
+	if (!ifp)
+		return NULL;
+
+	if (!ifp->idev) {
+		in6_ifa_put(ifp);
+		return NULL;
+	}
+
+	dev = ifp->idev->dev;
+	if (dev)
+		dev_hold(dev);
+
+	in6_ifa_put(ifp);
+
+	return dev;
+}
+
 /*
  * ecm_interface_mac_addr_get_ipv6_no_route()
  *	Finds the mac address of a node from its ip address reachable via
@@ -737,7 +765,7 @@ static bool ecm_interface_mac_addr_get_i
 	 * Get the MAC address that corresponds to IP address given.
 	 */
 	ECM_IP_ADDR_TO_NIN6_ADDR(daddr, addr);
-	local_dev = ipv6_dev_find(&init_net, &daddr, 1);
+	local_dev = ecm_interface_ipv6_dev_find_and_hold(&init_net, &daddr, 1);
 	if (local_dev) {
 		DEBUG_TRACE("%pi6 is a local address\n", &daddr);
 		memcpy(mac_addr, dev->dev_addr, ETH_ALEN);
--- a/ecm_interface.h
+++ b/ecm_interface.h
@@ -59,6 +59,7 @@ bool ecm_interface_find_route_by_addr(ip
 void ecm_interface_route_release(struct ecm_interface_route *rt);
 #ifdef ECM_IPV6_ENABLE
 struct neighbour *ecm_interface_ipv6_neigh_get(struct ecm_front_end_connection_instance *feci, ecm_db_obj_dir_t dir, ip_addr_t addr);
+struct net_device *ecm_interface_ipv6_dev_find_and_hold(struct net *net, struct in6_addr *addr, int strict);
 void ecm_interface_send_neighbour_solicitation(struct net_device *dev, ip_addr_t addr);
 #endif
 void ecm_interface_send_arp_request(struct net_device *dest_dev, ip_addr_t dest_addr, bool on_link, ip_addr_t gw_addr);
--- a/frontends/ecm_front_end_common.c
+++ b/frontends/ecm_front_end_common.c
@@ -62,11 +62,14 @@
 #include "ecm_front_end_common.h"
 #include "ecm_interface.h"
 #include "ecm_ae_classifier.h"
+#ifdef ECM_IPV6_ENABLE
+#include "ecm_front_end_ipv6.h"
+#endif
 
 #ifdef ECM_FRONT_END_NSS_ENABLE
 #include <nss_api_if.h>
 #include "ecm_nss_ipv4.h"
-#include "ecm_nss_ipv6.h"
+// #include "ecm_nss_ipv6.h"
 #include "ecm_nss_common.h"
 #include "ecm_nss_ported_ipv4.h"
 #include "ecm_nss_ported_ipv6.h"
@@ -557,7 +560,7 @@ bool ecm_front_end_gre_proto_is_accel_al
 			return false;
 		}
 
-		dev = ipv6_dev_find(&init_net, &(tuple->dst.u3.in6), 1);
+		dev = ecm_interface_ipv6_dev_find_and_hold(&init_net, &(tuple->dst.u3.in6), 1);
 		if (dev) {
 			/*
 			 * Destination IP address is local
@@ -614,14 +617,14 @@ void ecm_front_end_tcp_set_dscp_ext(stru
 			dscpcte->flow_priority = skb->priority;
 			dscpcte->flow_mark = skb->mark;
 			dscpcte->flow_dscp = iph->ds >> XT_DSCP_SHIFT;
-			dscpcte->flow_set_flags = NF_CT_DSCPREMARK_EXT_PRIO | NF_CT_DSCPREMARK_EXT_DSCP | NF_CT_DSCPREMARK_EXT_MARK;
+			dscpcte->flow_set_flags = NF_CT_DSCPREMARK_EXT_PRIO | NF_CT_DSCPREMARK_EXT_DSCP;
 			DEBUG_TRACE("%px: sender: %d flow priority: %d flow dscp: %d flow_mark: %d flow_set_flags: 0x%x\n",
 				    ct, sender, dscpcte->flow_priority, dscpcte->flow_dscp, dscpcte->flow_mark, dscpcte->flow_set_flags);
 		} else {
 			dscpcte->reply_priority =  skb->priority;
 			dscpcte->reply_mark =  skb->mark;
 			dscpcte->reply_dscp = iph->ds >> XT_DSCP_SHIFT;
-			dscpcte->return_set_flags = NF_CT_DSCPREMARK_EXT_PRIO | NF_CT_DSCPREMARK_EXT_DSCP | NF_CT_DSCPREMARK_EXT_MARK;
+			dscpcte->return_set_flags = NF_CT_DSCPREMARK_EXT_PRIO | NF_CT_DSCPREMARK_EXT_DSCP;
 			DEBUG_TRACE("%px: sender: %d reply priority: %d reply dscp: %d reply_mark: %d return_set_flags: 0x%x\n",
 				    ct, sender, dscpcte->reply_priority, dscpcte->reply_dscp, dscpcte->reply_mark, dscpcte->return_set_flags);
 		}
