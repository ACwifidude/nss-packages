--- a/exports/nss_api_if.h
+++ b/exports/nss_api_if.h
@@ -119,7 +119,11 @@
 #define NSS_MAX_PHYSICAL_INTERFACES 8	/**< Maximum number of physical interfaces. */
 #define NSS_MAX_VIRTUAL_INTERFACES 16	/**< Maximum number of virtual interfaces. */
 #define NSS_MAX_TUNNEL_INTERFACES 4	/**< Maximum number of tunnel interfaces. */
+#if (NSS_FW_VERSION_CODE < NSS_FW_VERSION(11,1))
+#define NSS_MAX_SPECIAL_INTERFACES 55	/**< Maximum number of special interfaces. */
+#else
 #define NSS_MAX_SPECIAL_INTERFACES 67	/**< Maximum number of special interfaces. */
+#endif
 #define NSS_MAX_WIFI_RADIO_INTERFACES 3	/**< Maximum number of radio interfaces. */
 
 /*
@@ -253,6 +257,10 @@
 		/**< Special interface number for timestamp receive. */
 #define NSS_GRE_REDIR_MARK_INTERFACE (NSS_SPECIAL_IF_START + 56)
 		/**< Special interface number for GRE redirect mark. */
+#if (NSS_FW_VERSION_CODE < NSS_FW_VERSION(11,1))
+#define NSS_RMNET_RX_INTERFACE (NSS_SPECIAL_IF_START + 57)
+		/**< Special interface number for RMNET receive handler. */
+#else
 #define NSS_VXLAN_INTERFACE (NSS_SPECIAL_IF_START + 57)
 		/**< Special interface number for VxLAN handler. */
 #define NSS_RMNET_RX_INTERFACE (NSS_SPECIAL_IF_START + 58)
@@ -269,7 +277,7 @@
 		/**< Special interface number for the Wi-Fi MAC database. */
 #define NSS_DMA_INTERFACE (NSS_SPECIAL_IF_START + 66)
 		/**< Special interface number for the DMA interface. */
-
+#endif
 
 #ifdef __KERNEL__ /* only kernel will use. */
 
--- a/exports/nss_dynamic_interface.h
+++ b/exports/nss_dynamic_interface.h
@@ -59,7 +59,11 @@ enum nss_dynamic_interface_type {
 	NSS_DYNAMIC_INTERFACE_TYPE_BRIDGE,
 	NSS_DYNAMIC_INTERFACE_TYPE_VLAN,
 	NSS_DYNAMIC_INTERFACE_TYPE_RESERVED_3,
+#if (NSS_FW_VERSION_CODE <= NSS_FW_VERSION(11,0))
+	NSS_DYNAMIC_INTERFACE_TYPE_WIFILI,
+#else
 	NSS_DYNAMIC_INTERFACE_TYPE_WIFILI_INTERNAL,
+#endif
 	NSS_DYNAMIC_INTERFACE_TYPE_MAP_T_INNER,
 	NSS_DYNAMIC_INTERFACE_TYPE_MAP_T_OUTER,
 	NSS_DYNAMIC_INTERFACE_TYPE_GRE_TUNNEL_INNER,
@@ -96,14 +100,16 @@ enum nss_dynamic_interface_type {
 	NSS_DYNAMIC_INTERFACE_TYPE_IGS,
 	NSS_DYNAMIC_INTERFACE_TYPE_CLMAP_US,
 	NSS_DYNAMIC_INTERFACE_TYPE_CLMAP_DS,
+#if (NSS_FW_VERSION_CODE > NSS_FW_VERSION(11,0))
 	NSS_DYNAMIC_INTERFACE_TYPE_VXLAN_INNER,
 	NSS_DYNAMIC_INTERFACE_TYPE_VXLAN_OUTER,
 	NSS_DYNAMIC_INTERFACE_TYPE_MATCH,
+#endif
 	NSS_DYNAMIC_INTERFACE_TYPE_RMNET_RX_N2H,
 	NSS_DYNAMIC_INTERFACE_TYPE_RMNET_RX_H2N,
+#if (NSS_FW_VERSION_CODE > NSS_FW_VERSION(11,0))
 	NSS_DYNAMIC_INTERFACE_TYPE_WIFILI_EXTERNAL0,
 	NSS_DYNAMIC_INTERFACE_TYPE_WIFILI_EXTERNAL1,
-#if (NSS_FW_VERSION_CODE > NSS_FW_VERSION(11,1))
 	NSS_DYNAMIC_INTERFACE_TYPE_TLS_INNER,
 	NSS_DYNAMIC_INTERFACE_TYPE_TLS_OUTER,
 	NSS_DYNAMIC_INTERFACE_TYPE_MIRROR,
--- a/nss_core.c
+++ b/nss_core.c
@@ -924,6 +924,7 @@ static inline void nss_core_handle_buffe
 	dev_put(ndev);
 }
 
+#if (NSS_FW_VERSION_CODE > NSS_FW_VERSION(11,0))
 /*
  * nss_core_handle_ext_buffer_pkt()
  *	Handle Extended data plane packet received on physical or virtual interface.
@@ -968,6 +969,7 @@ static inline void nss_core_handle_ext_b
 		dev_kfree_skb_any(nbuf);
 	}
 }
+#endif
 
 /*
  * nss_core_rx_pbuf()
@@ -984,7 +986,9 @@ static inline void nss_core_rx_pbuf(stru
 	NSS_PKT_STATS_DEC(&nss_ctx->nss_top->stats_drv[NSS_DRV_STATS_NSS_SKB_COUNT]);
 
 	if (interface_num >= NSS_MAX_NET_INTERFACES) {
+#if (NSS_FW_VERSION_CODE > NSS_FW_VERSION(11,0))
 		NSS_PKT_STATS_INC(&nss_ctx->nss_top->stats_drv[NSS_DRV_STATS_RX_INVALID_INTERFACE]);
+#endif
 		nss_warning("%px: Invalid interface_num: %d", nss_ctx, interface_num);
 		dev_kfree_skb_any(nbuf);
 		return;
@@ -994,7 +998,9 @@ static inline void nss_core_rx_pbuf(stru
 	 * Check if core_id value is valid.
 	 */
 	if (core_id > nss_top_main.num_nss) {
+#if (NSS_FW_VERSION_CODE > NSS_FW_VERSION(11,0))
 		NSS_PKT_STATS_INC(&nss_ctx->nss_top->stats_drv[NSS_DRV_STATS_RX_INVALID_CORE_ID]);
+#endif
 		nss_warning("%px: Invalid core id: %d", nss_ctx, core_id);
 		dev_kfree_skb_any(nbuf);
 		return;
@@ -1026,9 +1032,11 @@ static inline void nss_core_rx_pbuf(stru
 		nss_core_handle_bounced_pkt(nss_ctx, reg, nbuf);
 		break;
 
+#if (NSS_FW_VERSION_CODE > NSS_FW_VERSION(11,0))
 	case N2H_BUFFER_PACKET_EXT:
 		nss_core_handle_ext_buffer_pkt(nss_ctx, interface_num, nbuf, napi, desc->bit_flags);
 		break;
+#endif
 
 	case N2H_BUFFER_STATUS:
 		NSS_PKT_STATS_INC(&nss_ctx->nss_top->stats_drv[NSS_DRV_STATS_RX_STATUS]);
@@ -1060,7 +1068,9 @@ static inline void nss_core_rx_pbuf(stru
 		break;
 
 	default:
+#if (NSS_FW_VERSION_CODE > NSS_FW_VERSION(11,0))
 		NSS_PKT_STATS_INC(&nss_ctx->nss_top->stats_drv[NSS_DRV_STATS_RX_INVALID_BUFFER_TYPE]);
+#endif
 		nss_warning("%px: Invalid buffer type %d received from NSS", nss_ctx, buffer_type);
 		dev_kfree_skb_any(nbuf);
 	}
--- a/nss_dynamic_interface_stats.c
+++ b/nss_dynamic_interface_stats.c
@@ -43,7 +43,11 @@ const char *nss_dynamic_interface_type_n
 	"NSS_DYNAMIC_INTERFACE_TYPE_BRIDGE",
 	"NSS_DYNAMIC_INTERFACE_TYPE_VLAN",
 	"NSS_DYNAMIC_INTERFACE_TYPE_RESERVED_3",
+#if (NSS_FW_VERSION_CODE <= NSS_FW_VERSION(11,0))
+	"NSS_DYNAMIC_INTERFACE_TYPE_WIFILI",
+#else
 	"NSS_DYNAMIC_INTERFACE_TYPE_WIFILI_INTERNAL",
+#endif
 	"NSS_DYNAMIC_INTERFACE_TYPE_MAP_T_INNER",
 	"NSS_DYNAMIC_INTERFACE_TYPE_MAP_T_OUTER",
 	"NSS_DYNAMIC_INTERFACE_TYPE_GRE_TUNNEL_INNER",
@@ -80,13 +84,22 @@ const char *nss_dynamic_interface_type_n
 	"NSS_DYNAMIC_INTERFACE_TYPE_IGS",
 	"NSS_DYNAMIC_INTERFACE_TYPE_CLMAP_US",
 	"NSS_DYNAMIC_INTERFACE_TYPE_CLMAP_DS",
+#if (NSS_FW_VERSION_CODE > NSS_FW_VERSION(11,0))
 	"NSS_DYNAMIC_INTERFACE_TYPE_VXLAN_INNER",
 	"NSS_DYNAMIC_INTERFACE_TYPE_VXLAN_OUTER",
 	"NSS_DYNAMIC_INTERFACE_TYPE_MATCH",
+#endif
 	"NSS_DYNAMIC_INTERFACE_TYPE_RMNET_RX_N2H",
 	"NSS_DYNAMIC_INTERFACE_TYPE_RMNET_RX_H2N",
+#if (NSS_FW_VERSION_CODE > NSS_FW_VERSION(11,0))
 	"NSS_DYNAMIC_INTERFACE_TYPE_WIFILI_EXTERNAL0",
 	"NSS_DYNAMIC_INTERFACE_TYPE_WIFILI_EXTERNAL1",
+#endif
+#if (NSS_FW_VERSION_CODE > NSS_FW_VERSION(11,1))
+	"NSS_DYNAMIC_INTERFACE_TYPE_TLS_INNER",
+	"NSS_DYNAMIC_INTERFACE_TYPE_TLS_OUTER",
+	"NSS_DYNAMIC_INTERFACE_TYPE_MIRROR",
+#endif
 };
 
 /*
--- a/nss_n2h_strings.c
+++ b/nss_n2h_strings.c
@@ -38,14 +38,14 @@ struct nss_stats_info nss_n2h_strings_st
 	{"ticks"			, NSS_STATS_TYPE_SPECIAL},
 	{"worst_ticks"			, NSS_STATS_TYPE_SPECIAL},
 	{"iterations"			, NSS_STATS_TYPE_SPECIAL},
-	{"pbuf_ocm_total_count"		, NSS_STATS_TYPE_SPECIAL},
-	{"pbuf_ocm_free_count"		, NSS_STATS_TYPE_SPECIAL},
 	{"pbuf_ocm_alloc_fail_payload"	, NSS_STATS_TYPE_SPECIAL},
+	{"pbuf_ocm_free_count"		, NSS_STATS_TYPE_SPECIAL},
+	{"pbuf_ocm_total_count"		, NSS_STATS_TYPE_SPECIAL},
 	{"pbuf_ocm_alloc_fail_nopayload", NSS_STATS_TYPE_SPECIAL},
-	{"pbuf_def_total_count"		, NSS_STATS_TYPE_SPECIAL},
-	{"pbuf_def_free_count"		, NSS_STATS_TYPE_SPECIAL},
 	{"pbuf_def_alloc_fail_payload"	, NSS_STATS_TYPE_SPECIAL},
+	{"pbuf_def_free_count"		, NSS_STATS_TYPE_SPECIAL},
 	{"pbuf_def_alloc_fail_nopayload", NSS_STATS_TYPE_SPECIAL},
+	{"pbuf_def_total_count"		, NSS_STATS_TYPE_SPECIAL},
 	{"payload_alloc_fails"		, NSS_STATS_TYPE_SPECIAL},
 	{"payload_free_count"		, NSS_STATS_TYPE_SPECIAL},
 	{"h2n_control_pkts"		, NSS_STATS_TYPE_SPECIAL},
--- a/nss_hal/nss_hal.c
+++ b/nss_hal/nss_hal.c
@@ -88,6 +88,7 @@ int nss_hal_firmware_load(struct nss_ctx
 	return 0;
 }
 
+
 /*
  * nss_hal_dt_parse_features()
  */
@@ -98,14 +99,12 @@ void nss_hal_dt_parse_features(struct de
 	 */
 	npd->bridge_enabled = of_property_read_bool(np, "qcom,bridge-enabled");
 	npd->capwap_enabled = of_property_read_bool(np, "qcom,capwap-enabled");
-	npd->clmap_enabled = of_property_read_bool(np, "qcom,clmap-enabled");
 	npd->crypto_enabled = of_property_read_bool(np, "qcom,crypto-enabled");
 	npd->dtls_enabled = of_property_read_bool(np, "qcom,dtls-enabled");
 	npd->gre_enabled = of_property_read_bool(np, "qcom,gre-enabled");
 	npd->gre_redir_enabled = of_property_read_bool(np, "qcom,gre-redir-enabled");
 	npd->gre_tunnel_enabled = of_property_read_bool(np, "qcom,gre_tunnel_enabled");
 	npd->gre_redir_mark_enabled = of_property_read_bool(np, "qcom,gre-redir-mark-enabled");
-	npd->igs_enabled = of_property_read_bool(np, "qcom,igs-enabled");
 	npd->ipsec_enabled = of_property_read_bool(np, "qcom,ipsec-enabled");
 	npd->ipv4_enabled = of_property_read_bool(np, "qcom,ipv4-enabled");
 	npd->ipv4_reasm_enabled = of_property_read_bool(np, "qcom,ipv4-reasm-enabled");
@@ -119,20 +118,18 @@ void nss_hal_dt_parse_features(struct de
 	npd->pptp_enabled = of_property_read_bool(np, "qcom,pptp-enabled");
 	npd->portid_enabled = of_property_read_bool(np, "qcom,portid-enabled");
 	npd->pvxlan_enabled = of_property_read_bool(np, "qcom,pvxlan-enabled");
+	npd->clmap_enabled = of_property_read_bool(np, "qcom,clmap-enabled");
 	npd->qvpn_enabled = of_property_read_bool(np, "qcom,qvpn-enabled");
 	npd->rmnet_rx_enabled = of_property_read_bool(np, "qcom,rmnet_rx-enabled");
 	npd->shaping_enabled = of_property_read_bool(np, "qcom,shaping-enabled");
-	npd->tls_enabled = of_property_read_bool(np, "qcom,tls-enabled");
 	npd->tstamp_enabled = of_property_read_bool(np, "qcom,tstamp-enabled");
 	npd->turbo_frequency = of_property_read_bool(np, "qcom,turbo-frequency");
 	npd->tun6rd_enabled = of_property_read_bool(np, "qcom,tun6rd-enabled");
 	npd->tunipip6_enabled = of_property_read_bool(np, "qcom,tunipip6-enabled");
 	npd->vlan_enabled = of_property_read_bool(np, "qcom,vlan-enabled");
-	npd->vxlan_enabled = of_property_read_bool(np, "qcom,vxlan-enabled");
 	npd->wlanredirect_enabled = of_property_read_bool(np, "qcom,wlanredirect-enabled");
 	npd->wifioffload_enabled = of_property_read_bool(np, "qcom,wlan-dataplane-offload-enabled");
-	npd->match_enabled = of_property_read_bool(np, "qcom,match-enabled");
-	npd->mirror_enabled = of_property_read_bool(np, "qcom,mirror-enabled");
+	npd->igs_enabled = of_property_read_bool(np, "qcom,igs-enabled");
 }
 /*
  * nss_hal_clean_up_irq()
@@ -567,15 +564,18 @@ int nss_hal_probe(struct platform_device
 		nss_top->dynamic_interface_table[NSS_DYNAMIC_INTERFACE_TYPE_VAP] = nss_dev->id;
 		nss_wifi_register_handler();
 		nss_wifili_register_handler();
+#if (NSS_FW_VERSION_CODE <= NSS_FW_VERSION(11,0))
+		nss_top->dynamic_interface_table[NSS_DYNAMIC_INTERFACE_TYPE_WIFILI] = nss_dev->id;
+#else
 		nss_top->dynamic_interface_table[NSS_DYNAMIC_INTERFACE_TYPE_WIFILI_INTERNAL] = nss_dev->id;
 		nss_top->dynamic_interface_table[NSS_DYNAMIC_INTERFACE_TYPE_WIFILI_EXTERNAL0] = nss_dev->id;
 		nss_top->dynamic_interface_table[NSS_DYNAMIC_INTERFACE_TYPE_WIFILI_EXTERNAL1] = nss_dev->id;
-
 		/*
 		 * Register wifi mac database when offload enabled
 		 */
 		nss_top->wmdb_handler_id = nss_dev->id;
 		nss_wifi_mac_db_register_handler();
+#endif
 	}
 #endif
 
--- a/nss_wifili.c
+++ b/nss_wifili.c
@@ -50,8 +50,11 @@ static void nss_wifili_handler(struct ns
 	 */
 	BUG_ON((nss_is_dynamic_interface(ncm->interface))
 		|| ((ncm->interface != NSS_WIFILI_INTERNAL_INTERFACE)
+#if (NSS_FW_VERSION_CODE > NSS_FW_VERSION(11,0))
 		&& (ncm->interface != NSS_WIFILI_EXTERNAL_INTERFACE0)
-		&& (ncm->interface != NSS_WIFILI_EXTERNAL_INTERFACE1)));
+		&& (ncm->interface != NSS_WIFILI_EXTERNAL_INTERFACE1)
+#endif
+		));
 
 	/*
 	 * Trace messages.
@@ -172,8 +175,13 @@ nss_tx_status_t nss_wifili_tx_msg(struct
 	 * The interface number shall be one of the wifili soc interfaces
 	 */
 	if ((ncm->interface != NSS_WIFILI_INTERNAL_INTERFACE)
+#if (NSS_FW_VERSION_CODE > NSS_FW_VERSION(11,0))
 		&& (ncm->interface != NSS_WIFILI_EXTERNAL_INTERFACE0)
-		&& (ncm->interface != NSS_WIFILI_EXTERNAL_INTERFACE1)) {
+		&& (ncm->interface != NSS_WIFILI_EXTERNAL_INTERFACE1))
+#else
+	)
+#endif
+	{
 		nss_warning("%px: tx request for interface that is not a wifili: %d", nss_ctx, ncm->interface);
 		return NSS_TX_FAILURE;
 	}
@@ -230,6 +238,7 @@ EXPORT_SYMBOL(nss_wifili_get_context);
  * nss_get_available_wifili_external_if()
  *	Check and return the available external interface
  */
+#if (NSS_FW_VERSION_CODE > NSS_FW_VERSION(11,0))
 uint32_t nss_get_available_wifili_external_if(void)
 {
 	struct nss_ctx_instance *nss_ctx = (struct nss_ctx_instance *)&nss_top_main.nss[nss_top_main.wifi_handler_id];
@@ -250,7 +259,7 @@ uint32_t nss_get_available_wifili_extern
 	return NSS_MAX_NET_INTERFACES;
 }
 EXPORT_SYMBOL(nss_get_available_wifili_external_if);
-
+#endif
 /*
  * nss_wifili_msg_init()
  *	Initialize nss_wifili_msg.
@@ -362,9 +371,10 @@ void nss_wifili_register_handler(void)
 
 	nss_info("nss_wifili_register_handler");
 	nss_core_register_handler(nss_ctx, NSS_WIFILI_INTERNAL_INTERFACE, nss_wifili_handler, NULL);
+#if (NSS_FW_VERSION_CODE > NSS_FW_VERSION(11,0))
 	nss_core_register_handler(nss_ctx, NSS_WIFILI_EXTERNAL_INTERFACE0, nss_wifili_handler, NULL);
 	nss_core_register_handler(nss_ctx, NSS_WIFILI_EXTERNAL_INTERFACE1, nss_wifili_handler, NULL);
-
+#endif
 	nss_wifili_stats_dentry_create();
 	nss_wifili_strings_dentry_create();
 
--- a/nss_wifili_stats.c
+++ b/nss_wifili_stats.c
@@ -248,6 +248,7 @@ void nss_wifili_stats_sync(struct nss_ct
 		nwss->soc_maxpdev = NSS_WIFILI_MAX_PDEV_NUM_MSG;
 		break;
 
+#if (NSS_FW_VERSION_CODE > NSS_FW_VERSION(11,0))
 	case NSS_WIFILI_EXTERNAL_INTERFACE0:
 		nwss = &soc_stats[1];
 		nwss->soc_maxpdev = NSS_WIFILI_SOC_ATTACHED_MAX_PDEV_NUM;
@@ -257,6 +258,7 @@ void nss_wifili_stats_sync(struct nss_ct
 		nwss = &soc_stats[2];
 		nwss->soc_maxpdev = NSS_WIFILI_SOC_ATTACHED_MAX_PDEV_NUM;
 		break;
+#endif
 
 	default:
 		nss_warning("%px: Invalid wifili interface\n", nss_ctx);
@@ -470,6 +472,7 @@ void nss_wifili_stats_notify(struct nss_
 		index = 0;
 		break;
 
+#if (NSS_FW_VERSION_CODE > NSS_FW_VERSION(11,0))
 	case NSS_WIFILI_EXTERNAL_INTERFACE0:
 		index = 1;
 		break;
@@ -477,6 +480,7 @@ void nss_wifili_stats_notify(struct nss_
 	case NSS_WIFILI_EXTERNAL_INTERFACE1:
 		index = 2;
 		break;
+#endif
 
 	default:
 		nss_warning("%px: Invalid wifili interface\n", nss_ctx);
--- a/Makefile
+++ b/Makefile
@@ -85,8 +85,10 @@ qca-nss-drv-objs += nss_wifi.o \
 			nss_wifili.o \
 			nss_wifili_log.o \
 			nss_wifili_stats.o \
-			nss_wifili_strings.o \
-			nss_wifi_mac_db.o
+			nss_wifili_strings.o
+ifeq ($(shell test $(TARGET_NSS_MINOR_VERSION) -gt 0; echo $$?),0)
+qca-nss-drv-objs += nss_wifi_mac_db.o
+endif
 endif
 
 ifneq "$(NSS_DRV_BRIDGE_ENABLE)" "n"
--- a/nss_tx_rx_common.h
+++ b/nss_tx_rx_common.h
@@ -96,7 +96,9 @@ extern void nss_wifili_register_handler(
 extern void nss_ppe_register_handler(void);
 extern void nss_gre_redir_mark_register_handler(void);
 extern void nss_ppe_vp_register_handler(void);
+#if (NSS_FW_VERSION_CODE > NSS_FW_VERSION(11,0))
 extern void nss_wifi_mac_db_register_handler(void);
+#endif
 
 /*
  * nss_if_msg_handler()
